import { google } from "googleapis";
import fetch from "node-fetch";
import dotenv from "dotenv";
import fs from "fs";

dotenv.config();

const auth = new google.auth.GoogleAuth({
  keyFile: "credentials.json",
  scopes: ["https://www.googleapis.com/auth/spreadsheets"],
});

const sheets = google.sheets({ version: "v4", auth });
const spreadsheetId = process.env.SPREADSHEET_ID;

// üìÑ –ß—Ç–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã "–æ—Å–Ω–æ–≤–∞"
async function getCabinets() {
  const res = await sheets.spreadsheets.values.get({
    spreadsheetId,
    range: "–æ—Å–Ω–æ–≤–∞!A2:C",
  });

  return res.data.values || [];
}

// üßπ –û—á–∏—Å—Ç–∫–∞ –∏ —à–∞–ø–∫–∞ –¥–ª—è –ª–∏—Å—Ç–∞
async function resetSheet(sheetName, headers) {
  await sheets.spreadsheets.values.clear({
    spreadsheetId,
    range: `${sheetName}!A1:Z10000`,
  });

  await sheets.spreadsheets.values.update({
    spreadsheetId,
    range: `${sheetName}!A1`,
    valueInputOption: "RAW",
    requestBody: { values: [headers] },
  });
}

// üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
async function appendRow(sheetName, row) {
  await sheets.spreadsheets.values.append({
    spreadsheetId,
    range: `${sheetName}!A1`,
    valueInputOption: "RAW",
    requestBody: { values: [row] },
  });
}

// üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
async function getStock(login, password, cabinetName) {
  const headers = buildHeaders(login, password);
  const res = await fetch(`https://api.moysklad.ru/api/remap/1.2/report/stock/all?limit=1000`, { headers });
  const json = await res.json();

  for (const row of json.rows || []) {
    const name = row.name || "‚Äî";
    const article = row.article || "‚Äî";
    const code = row.code || "‚Äî";
    const qty = row.quantity || 0;

    await appendRow(`–û—Å—Ç–∞—Ç–∫–∏ –æ–±—â–µ–µ`, [cabinetName, name, article, code, qty]);
    await appendRow(`–û—Å—Ç–∞—Ç–∫–∏ ${cabinetName}`, [name, article, code, qty]);
  }
}

// üìã –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤
async function getPurchaseOrders(login, password, cabinetName) {
  const headers = buildHeaders(login, password);
  const res = await fetch(`https://api.moysklad.ru/api/remap/1.2/entity/purchaseorder?expand=positions,agent,state&limit=100`, { headers });
  const json = await res.json();
  const cache = {};

  for (const order of json.rows || []) {
    const status = order.state?.name?.toLowerCase() || "";
    if (status.includes("–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")) continue;

    const date = order.moment?.split("T")[0] || "‚Äî";
    const agent = order.agent?.name || "‚Äî";
    const state = order.state?.name || "‚Äî";

    for (const pos of order.positions?.rows || []) {
      const href = pos.assortment?.meta?.href;
      const { name, article, code } = await getProduct(href, headers, cache);
      const qty = pos.quantity || 0;

      await appendRow(`–ü–æ–∑–∏—Ü–∏–∏–ó–∞–∫–∞–∑–æ–≤ –æ–±—â–µ–µ`, [cabinetName, date, agent, state, name, article, code, qty]);
      await appendRow(`–ü–æ–∑–∏—Ü–∏–∏–ó–∞–∫–∞–∑–æ–≤ ${cabinetName}`, [date, agent, state, name, article, code, qty]);
    }
  }
}

// üöö –û—Ç–≥—Ä—É–∑–∫–∏
async function getShipments(login, password, cabinetName) {
  const headers = buildHeaders(login, password);
  const res = await fetch(`https://api.moysklad.ru/api/remap/1.2/entity/demand?expand=positions,agent,state&limit=100`, { headers });
  const json = await res.json();
  const cache = {};

  for (const ship of json.rows || []) {
    const status = ship.state?.name?.toLowerCase() || "";
    if (status.includes("–ø–æ—Å—Ç—É–ø–∏–ª–æ –≤ –ø—Ä–æ–¥–∞–∂—É")) continue;

    const date = ship.moment?.split("T")[0] || "‚Äî";
    const agent = ship.agent?.name || "‚Äî";
    const state = ship.state?.name || "‚Äî";

    for (const pos of ship.positions?.rows || []) {
      const href = pos.assortment?.meta?.href;
      const { name, article, code } = await getProduct(href, headers, cache);
      const qty = pos.quantity || 0;

      await appendRow(`–û—Ç–≥—Ä—É–∑–∫–∏ –æ–±—â–µ–µ`, [cabinetName, date, agent, state, name, article, code, qty]);
      await appendRow(`–û—Ç–≥—Ä—É–∑–∫–∏ ${cabinetName}`, [date, agent, state, name, article, code, qty]);
    }
  }
}

// üß† –ü–æ–¥–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ href
async function getProduct(href, headers, cache) {
  if (cache[href]) return cache[href];
  const res = await fetch(href, { headers });
  const json = await res.json();
  const result = {
    name: json.name || "‚Äî",
    article: json.article || "‚Äî",
    code: json.code || "‚Äî",
  };
  cache[href] = result;
  return result;
}

// üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –ú–æ–π–°–∫–ª–∞–¥
function buildHeaders(login, password) {
  const auth = Buffer.from(`${login}:${password}`).toString("base64");
  return {
    "Authorization": `Basic ${auth}`,
    "Content-Type": "application/json",
    "User-Agent": "mysklad-sync-bot",
  };
}

// üß© –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
(async () => {
  const cabinets = await getCabinets();

  // –û—á–∏—Å—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤
  await resetSheet("–û—Å—Ç–∞—Ç–∫–∏ –æ–±—â–µ–µ", ["–ö–∞–±–∏–Ω–µ—Ç", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ê—Ä—Ç–∏–∫—É–ª", "–ö–æ–¥", "–û—Å—Ç–∞—Ç–æ–∫"]);
  await resetSheet("–ü–æ–∑–∏—Ü–∏–∏–ó–∞–∫–∞–∑–æ–≤ –æ–±—â–µ–µ", ["–ö–∞–±–∏–Ω–µ—Ç", "–î–∞—Ç–∞", "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", "–°—Ç–∞—Ç—É—Å", "–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª", "–ö–æ–¥", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]);
  await resetSheet("–û—Ç–≥—Ä—É–∑–∫–∏ –æ–±—â–µ–µ", ["–ö–∞–±–∏–Ω–µ—Ç", "–î–∞—Ç–∞", "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", "–°—Ç–∞—Ç—É—Å", "–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª", "–ö–æ–¥", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]);

  for (const [cabinetName, login, password] of cabinets) {
    await resetSheet(`–û—Å—Ç–∞—Ç–∫–∏ ${cabinetName}`, ["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ê—Ä—Ç–∏–∫—É–ª", "–ö–æ–¥", "–û—Å—Ç–∞—Ç–æ–∫"]);
    await resetSheet(`–ü–æ–∑–∏—Ü–∏–∏–ó–∞–∫–∞–∑–æ–≤ ${cabinetName}`, ["–î–∞—Ç–∞", "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", "–°—Ç–∞—Ç—É—Å", "–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª", "–ö–æ–¥", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]);
    await resetSheet(`–û—Ç–≥—Ä—É–∑–∫–∏ ${cabinetName}`, ["–î–∞—Ç–∞", "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", "–°—Ç–∞—Ç—É—Å", "–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª", "–ö–æ–¥", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]);

    console.log(`üì° –û–±—Ä–∞–±–æ—Ç–∫–∞: ${cabinetName}`);
    await getStock(login, password, cabinetName);
    await getPurchaseOrders(login, password, cabinetName);
    await getShipments(login, password, cabinetName);
  }

  console.log("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
})();
